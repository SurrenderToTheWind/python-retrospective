import functools
import collections
from collections import defaultdict
from collections import OrderedDict


def groupby(func, seq):
    """ Group values in seq on keys generated by func and return a dict.
    elements of the collection seq.
    """
    result = defaultdict(list)
    for elem in seq:
        result[func(elem)].append(elem)
    return dict(result)


def compose(func1, func2):
    """ Return the composition of two functions. """
    return lambda arg: func1(func2(arg))


def iterate(func):
    """Generator function.
    The first time it generates the identity function.
    Each next time it returns the composition of func and the previous result.
    """
    current_func = lambda x: x

    while True:
        yield current_func
        current_func = compose(func, current_func)


def zip_with(func, *iterables):
    tuples_of_ith_arguments = zip(*iterables)
    for arg_tuple in tuples_of_ith_arguments:
        yield func(*arg_tuple)


def cache(func, cashe_size):

    memory = OrderedDict()

    def func_cashed(*args):
        if args in memory:
            return memory[args]
        result = func(*args)
        if len(memory) == cashe_size and cashe_size is not 0:
            memory.popitem(False)
        if cashe_size is not 0:
            memory[args] = result
        return result
    return func_cashed
